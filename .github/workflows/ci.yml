name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript type checking
        run: npm run type-check
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check code formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true # Don't fail on moderate vulnerabilities
        
      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'ecosystem-marketplace'
          path: '.'
          format: 'HTML'
        continue-on-error: true

      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          config: './.gitleaks.toml' # Optional: path to gitleaks config file
          verbose: true
        continue-on-error: false # This should fail the build if secrets are found

  # Job 3: Build and Test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    env:
      # Add test environment variables
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_ROLE }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.TEST_CLERK_SECRET_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.TEST_STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.TEST_STRIPE_WEBHOOK_SECRET }}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.TEST_STRIPE_PUBLISHABLE_KEY }}
      NEXT_PUBLIC_PLATFORM_FEE_PERCENT: '10'
      NEXT_PUBLIC_GUEST_FEE_PERCENT: '20'
      ACTIVE_PAYMENT_PROVIDER: 'stripe'
      NEXT_PUBLIC_APP_URL: 'http://localhost:3000'
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: '/login'
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: '/signup'
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: '/dashboard'
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: '/dashboard'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations (test)
        run: npm run db:migrate
        continue-on-error: true # Skip if test DB not configured
        
      - name: Build application
        run: npm run build
        
      - name: Run tests
        run: npm test
        if: always()
        continue-on-error: true # Tests not yet implemented

  # Job 4: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, security, build-test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run integration tests
        run: |
          chmod +x ./scripts/test-integrations.sh
          ./scripts/test-integrations.sh
        continue-on-error: true
        
      - name: Validate environment variables
        run: |
          chmod +x ./scripts/validate-env.sh
          ./scripts/validate-env.sh
        continue-on-error: true

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, security, build-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          alias-domains: staging-ecosystem.vercel.app

  # Job 6: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, security, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://ecosystem-platform.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          
      - name: Verify deployment
        run: |
          sleep 30
          curl -f https://ecosystem-platform.com || exit 1
        continue-on-error: true

  # Job 7: Post-Deployment Checks
  post-deploy:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Check production health
        run: |
          curl -f https://ecosystem-platform.com/api/user/status || exit 1
        continue-on-error: true
        
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
        continue-on-error: true
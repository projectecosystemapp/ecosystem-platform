# ===============================
# REDIS CLOUD CONFIGURATION
# Complete setup for Redis Cloud integration
# ===============================

# ==== REDIS CLOUD CONNECTION (REQUIRED) ====
# Your Redis Cloud instance connection details
REDIS_HOST=redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com
REDIS_PORT=17405
REDIS_PASSWORD=wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy
REDIS_USERNAME=default

# Full connection URL (alternative to individual settings)
REDIS_URL=redis://default:wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy@redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com:17405

# ==== REDIS TLS CONFIGURATION (OPTIONAL) ====
# Enable TLS for secure connections (recommended for production)
REDIS_TLS=false

# ==== UPSTASH CONFIGURATION (DEPRECATED - KEEPING FOR BACKWARD COMPATIBILITY) ====
# These are no longer needed with Redis Cloud but kept for existing code
# UPSTASH_REDIS_REST_URL=https://your-instance.upstash.io
# UPSTASH_REDIS_REST_TOKEN=your-token

# ==== CACHE CONFIGURATION (OPTIONAL) ====
# Use separate Redis databases or instances for different purposes
# If not set, will use the main Redis connection
REDIS_CACHE_URL=redis://default:wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy@redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com:17405/1
REDIS_SESSION_URL=redis://default:wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy@redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com:17405/2

# ==== HEALTH CHECK CONFIGURATION ====
# Token for authenticated health check endpoints (generate with: openssl rand -base64 32)
HEALTH_CHECK_TOKEN=your-secure-health-check-token-here

# ==== RATE LIMITING CONFIGURATION ====
# Fine-tune rate limiting thresholds (optional - has defaults)
RATE_LIMIT_API_REQUESTS=100
RATE_LIMIT_API_WINDOW=60000
RATE_LIMIT_AUTH_REQUESTS=10
RATE_LIMIT_AUTH_WINDOW=900000
RATE_LIMIT_WEBHOOK_REQUESTS=1000
RATE_LIMIT_WEBHOOK_WINDOW=1000

# ==== CACHE TTL CONFIGURATION (in seconds) ====
# Customize cache expiration times
CACHE_TTL_PROVIDER_PROFILE=300
CACHE_TTL_SEARCH_RESULTS=30
CACHE_TTL_SERVICE_LIST=1800
CACHE_TTL_AVAILABILITY=120

# ==== MONITORING & ALERTING ====
# Redis monitoring endpoints
REDIS_MONITOR_ENABLED=true
REDIS_ALERT_THRESHOLD_LATENCY=100
REDIS_ALERT_THRESHOLD_MEMORY=100
REDIS_ALERT_EMAIL=alerts@yourdomain.com

# ===============================
# MIGRATION FROM UPSTASH TO REDIS CLOUD
# ===============================

# Benefits of Redis Cloud over Upstash:
# 1. Native Redis protocol (10x faster than REST API)
# 2. Connection pooling for better concurrency
# 3. Support for pub/sub and advanced Redis features
# 4. Lower latency (sub-millisecond vs 10-50ms)
# 5. Better performance under high load
# 6. Direct access to Redis commands

# Migration Steps:
# 1. ✅ Add Redis Cloud connection details above
# 2. ✅ Install ioredis package: npm install ioredis
# 3. ✅ Update imports from '@/lib/rate-limiter-redis' to '@/lib/rate-limiter-redis-cloud'
# 4. ✅ Test health check: curl http://localhost:3000/api/health/redis
# 5. ✅ Monitor performance improvements in production

# ===============================
# TESTING YOUR REDIS CONNECTION
# ===============================

# Using redis-cli:
# redis-cli -u redis://default:wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy@redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com:17405

# Test commands:
# PING                    # Should return PONG
# INFO server            # Shows Redis server info
# CLIENT LIST            # Shows connected clients
# CONFIG GET maxclients  # Shows max client connections

# ===============================
# PERFORMANCE BENCHMARKS
# ===============================

# Expected performance with Redis Cloud:
# - Rate limit check: < 1ms
# - Cache get/set: < 2ms
# - Health check: < 5ms
# - Concurrent connections: 10,000+
# - Operations per second: 100,000+

# Compare with Upstash REST API:
# - Rate limit check: 10-50ms
# - Cache get/set: 15-60ms
# - Health check: 20-100ms
# - Concurrent connections: Limited by HTTP
# - Operations per second: 10,000

# ===============================
# PRODUCTION CHECKLIST
# ===============================

# Before deploying to production:
# 1. ✅ Set unique HEALTH_CHECK_TOKEN
# 2. ✅ Enable REDIS_TLS=true for secure connections
# 3. ✅ Configure monitoring alerts
# 4. ✅ Test rate limiting on all endpoints
# 5. ✅ Verify cache invalidation logic
# 6. ✅ Set up Redis Cloud backups
# 7. ✅ Configure Redis Cloud auto-scaling
# 8. ✅ Set up alerting for high memory/CPU usage
# 9. ✅ Test failover scenarios
# 10. ✅ Monitor Redis Cloud dashboard

# ===============================
# TROUBLESHOOTING
# ===============================

# Connection refused:
# - Check firewall rules allow port 17405
# - Verify Redis Cloud instance is running
# - Check password is correct

# High latency:
# - Check network path to us-east-1-2
# - Consider using Redis Cloud in same region as app
# - Check for connection pool exhaustion

# Memory issues:
# - Monitor eviction policy (allkeys-lru recommended)
# - Check key expiration is working
# - Review cache TTL values
# - Consider upgrading Redis Cloud plan

# Rate limiting not working:
# - Check Redis connection in health endpoint
# - Verify rate limiter is using Redis (not in-memory fallback)
# - Check Redis keys are being created (use redis-cli KEYS ratelimit:*)
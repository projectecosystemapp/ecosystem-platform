# ===============================
# UPSTASH REDIS CONFIGURATION
# Complete setup for Upstash Redis integration
# ===============================

# ==== UPSTASH REDIS CONNECTION (REQUIRED FOR RATE LIMITING) ====
# Get these from your Upstash Redis dashboard: https://console.upstash.com
UPSTASH_REDIS_REST_URL=https://your-redis-name-12345.upstash.io
UPSTASH_REDIS_REST_TOKEN=AXxxACQgxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ==== LEGACY REDIS CLOUD CONFIGURATION (OPTIONAL - FOR OTHER FEATURES) ====
# These are still used for some caching features but not rate limiting
REDIS_HOST=redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com
REDIS_PORT=17405
REDIS_PASSWORD=wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy
REDIS_USERNAME=default

# Full connection URL (alternative to individual settings)
REDIS_URL=redis://default:wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy@redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com:17405

# ==== REDIS TLS CONFIGURATION (OPTIONAL) ====
# Enable TLS for secure connections (recommended for production)
REDIS_TLS=false

# ==== CACHE CONFIGURATION (OPTIONAL) ====
# Use separate Redis databases or instances for different purposes
# If not set, will use the main Redis connection
REDIS_CACHE_URL=redis://default:wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy@redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com:17405/1
REDIS_SESSION_URL=redis://default:wyr7LqK5IjaJwppkEB7L18IRcz4iqIzy@redis-17405.c244.us-east-1-2.ec2.redns.redis-cloud.com:17405/2

# ==== HEALTH CHECK CONFIGURATION ====
# Token for authenticated health check endpoints (generate with: openssl rand -base64 32)
HEALTH_CHECK_TOKEN=your-secure-health-check-token-here

# ==== RATE LIMITING CONFIGURATION ====
# Fine-tune rate limiting thresholds (optional - has defaults)
RATE_LIMIT_API_REQUESTS=100
RATE_LIMIT_API_WINDOW=60000
RATE_LIMIT_AUTH_REQUESTS=10
RATE_LIMIT_AUTH_WINDOW=900000
RATE_LIMIT_WEBHOOK_REQUESTS=1000
RATE_LIMIT_WEBHOOK_WINDOW=1000

# ==== CACHE TTL CONFIGURATION (in seconds) ====
# Customize cache expiration times
CACHE_TTL_PROVIDER_PROFILE=300
CACHE_TTL_SEARCH_RESULTS=30
CACHE_TTL_SERVICE_LIST=1800
CACHE_TTL_AVAILABILITY=120

# ==== MONITORING & ALERTING ====
# Redis monitoring endpoints
REDIS_MONITOR_ENABLED=true
REDIS_ALERT_THRESHOLD_LATENCY=100
REDIS_ALERT_THRESHOLD_MEMORY=100
REDIS_ALERT_EMAIL=alerts@yourdomain.com

# ===============================
# SETTING UP UPSTASH REDIS
# ===============================

# Benefits of Upstash Redis:
# 1. Serverless-first design (no connection management)
# 2. Pay-per-request pricing model
# 3. Automatic scaling based on usage
# 4. Built-in security and DDoS protection
# 5. Global edge locations for low latency
# 6. Zero maintenance required

# Setup Steps:
# 1. ✅ Create account at https://console.upstash.com
# 2. ✅ Create a new Redis database
# 3. ✅ Copy REST URL and Token from dashboard
# 4. ✅ Add environment variables above
# 5. ✅ Test connection: npm run redis:check
# 6. ✅ Monitor usage in Upstash dashboard

# ===============================
# TESTING YOUR UPSTASH REDIS CONNECTION
# ===============================

# Using curl to test REST API:
# curl -X GET "https://your-redis-name-12345.upstash.io/ping" \
#      -H "Authorization: Bearer AXxxACQgxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# Using the test script:
# npm run redis:check

# Test commands via REST API:
# curl -X GET "https://your-redis-name-12345.upstash.io/ping"
# curl -X POST "https://your-redis-name-12345.upstash.io/set/test/hello"
# curl -X GET "https://your-redis-name-12345.upstash.io/get/test"

# ===============================
# PERFORMANCE BENCHMARKS
# ===============================

# Expected performance with Upstash Redis:
# - Rate limit check: 5-15ms (REST API)
# - Cache get/set: 10-30ms
# - Health check: 5-20ms
# - Concurrent connections: Unlimited (HTTP)
# - Operations per second: 100,000+
# - Global latency: <100ms (edge locations)

# Benefits over traditional Redis:
# - No connection management overhead
# - Auto-scaling handles traffic spikes
# - Built-in persistence and backups
# - Global distribution

# ===============================
# PRODUCTION CHECKLIST
# ===============================

# Before deploying to production:
# 1. ✅ Set unique HEALTH_CHECK_TOKEN
# 2. ✅ Enable REDIS_TLS=true for secure connections
# 3. ✅ Configure monitoring alerts
# 4. ✅ Test rate limiting on all endpoints
# 5. ✅ Verify cache invalidation logic
# 6. ✅ Set up Redis Cloud backups
# 7. ✅ Configure Redis Cloud auto-scaling
# 8. ✅ Set up alerting for high memory/CPU usage
# 9. ✅ Test failover scenarios
# 10. ✅ Monitor Redis Cloud dashboard

# ===============================
# TROUBLESHOOTING
# ===============================

# Connection refused:
# - Check firewall rules allow port 17405
# - Verify Redis Cloud instance is running
# - Check password is correct

# High latency:
# - Check network path to us-east-1-2
# - Consider using Redis Cloud in same region as app
# - Check for connection pool exhaustion

# Memory issues:
# - Monitor eviction policy (allkeys-lru recommended)
# - Check key expiration is working
# - Review cache TTL values
# - Consider upgrading Redis Cloud plan

# Rate limiting not working:
# - Check Redis connection in health endpoint
# - Verify rate limiter is using Redis (not in-memory fallback)
# - Check Redis keys are being created (use redis-cli KEYS ratelimit:*)